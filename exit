#include <iostream>
#include <cmath>
#include <fstream>
#include <bits/stdc++.h>
#include <glad/glad.h>
#include <GLFW/glfw3.h>

#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include <glm/gtx/transform.hpp>
#include <glm/gtc/matrix_transform.hpp>

using namespace std;

#define PB push_back
#define MP make_pair
#define F first
#define S second
typedef pair<double,double> DD;

struct VAO {
    GLuint VertexArrayID;
    GLuint VertexBuffer;
    GLuint ColorBuffer;

    GLenum PrimitiveMode;
    GLenum FillMode;
    int NumVertices;
};
typedef struct VAO VAO;

struct GLMatrices {
	glm::mat4 projection;
	glm::mat4 model;
	glm::mat4 view;
	GLuint MatrixID;
} Matrices;

GLuint programID;

/* Function to load Shaders - Use it as it is */
GLuint LoadShaders(const char * vertex_file_path,const char * fragment_file_path) {

	// Create the shaders
	GLuint VertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	GLuint FragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);

	// Read the Vertex Shader code from the file
	std::string VertexShaderCode;
	std::ifstream VertexShaderStream(vertex_file_path, std::ios::in);
	if(VertexShaderStream.is_open())
	{
		std::string Line = "";
		while(getline(VertexShaderStream, Line))
			VertexShaderCode += "\n" + Line;
		VertexShaderStream.close();
	}

	// Read the Fragment Shader code from the file
	std::string FragmentShaderCode;
	std::ifstream FragmentShaderStream(fragment_file_path, std::ios::in);
	if(FragmentShaderStream.is_open()){
		std::string Line = "";
		while(getline(FragmentShaderStream, Line))
			FragmentShaderCode += "\n" + Line;
		FragmentShaderStream.close();
	}

	GLint Result = GL_FALSE;
	int InfoLogLength;

	// Compile Vertex Shader
	printf("Compiling shader : %s\n", vertex_file_path);
	char const * VertexSourcePointer = VertexShaderCode.c_str();
	glShaderSource(VertexShaderID, 1, &VertexSourcePointer , NULL);
	glCompileShader(VertexShaderID);

	// Check Vertex Shader
	glGetShaderiv(VertexShaderID, GL_COMPILE_STATUS, &Result);
	glGetShaderiv(VertexShaderID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> VertexShaderErrorMessage(InfoLogLength);
	glGetShaderInfoLog(VertexShaderID, InfoLogLength, NULL, &VertexShaderErrorMessage[0]);
	fprintf(stdout, "%s\n", &VertexShaderErrorMessage[0]);

	// Compile Fragment Shader
	printf("Compiling shader : %s\n", fragment_file_path);
	char const * FragmentSourcePointer = FragmentShaderCode.c_str();
	glShaderSource(FragmentShaderID, 1, &FragmentSourcePointer , NULL);
	glCompileShader(FragmentShaderID);

	// Check Fragment Shader
	glGetShaderiv(FragmentShaderID, GL_COMPILE_STATUS, &Result);
	glGetShaderiv(FragmentShaderID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> FragmentShaderErrorMessage(InfoLogLength);
	glGetShaderInfoLog(FragmentShaderID, InfoLogLength, NULL, &FragmentShaderErrorMessage[0]);
	fprintf(stdout, "%s\n", &FragmentShaderErrorMessage[0]);

	// Link the program
	fprintf(stdout, "Linking program\n");
	GLuint ProgramID = glCreateProgram();
	glAttachShader(ProgramID, VertexShaderID);
	glAttachShader(ProgramID, FragmentShaderID);
	glLinkProgram(ProgramID);

	// Check the program
	glGetProgramiv(ProgramID, GL_LINK_STATUS, &Result);
	glGetProgramiv(ProgramID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> ProgramErrorMessage( max(InfoLogLength, int(1)) );
	glGetProgramInfoLog(ProgramID, InfoLogLength, NULL, &ProgramErrorMessage[0]);
	fprintf(stdout, "%s\n", &ProgramErrorMessage[0]);

	glDeleteShader(VertexShaderID);
	glDeleteShader(FragmentShaderID);

	return ProgramID;
}

static void error_callback(int error, const char* description)
{
    fprintf(stderr, "Error: %s\n", description);
}

void quit(GLFWwindow *window)
{
    glfwDestroyWindow(window);
    glfwTerminate();
    exit(EXIT_SUCCESS);
}


/* Generate VAO, VBOs and return VAO handle */
struct VAO* create3DObject (GLenum primitive_mode, int numVertices, const GLfloat* vertex_buffer_data, const GLfloat* color_buffer_data, GLenum fill_mode=GL_FILL)
{
    struct VAO* vao = new struct VAO;
    vao->PrimitiveMode = primitive_mode;
    vao->NumVertices = numVertices;
    vao->FillMode = fill_mode;

    // Create Vertex Array Object
    // Should be done after CreateWindow and before any other GL calls
    glGenVertexArrays(1, &(vao->VertexArrayID)); // VAO
    glGenBuffers (1, &(vao->VertexBuffer)); // VBO - vertices
    glGenBuffers (1, &(vao->ColorBuffer));  // VBO - colors

    glBindVertexArray (vao->VertexArrayID); // Bind the VAO
    glBindBuffer (GL_ARRAY_BUFFER, vao->VertexBuffer); // Bind the VBO vertices
    glBufferData (GL_ARRAY_BUFFER, 3*numVertices*sizeof(GLfloat), vertex_buffer_data, GL_STATIC_DRAW); // Copy the vertices into VBO
    glVertexAttribPointer(
                          0,                  // attribute 0. Vertices
                          3,                  // size (x,y,z)
                          GL_FLOAT,           // type
                          GL_FALSE,           // normalized?
                          0,                  // stride
                          (void*)0            // array buffer offset
                          );

    glBindBuffer (GL_ARRAY_BUFFER, vao->ColorBuffer); // Bind the VBO colors
    glBufferData (GL_ARRAY_BUFFER, 3*numVertices*sizeof(GLfloat), color_buffer_data, GL_STATIC_DRAW);  // Copy the vertex colors
    glVertexAttribPointer(
                          1,                  // attribute 1. Color
                          3,                  // size (r,g,b)
                          GL_FLOAT,           // type
                          GL_FALSE,           // normalized?
                          0,                  // stride
                          (void*)0            // array buffer offset
                          );

    return vao;
}

/* Generate VAO, VBOs and return VAO handle - Common Color for all vertices */
struct VAO* create3DObject (GLenum primitive_mode, int numVertices, const GLfloat* vertex_buffer_data, const GLfloat red, const GLfloat green, const GLfloat blue, GLenum fill_mode=GL_FILL)
{
    GLfloat* color_buffer_data = new GLfloat [3*numVertices];
    for (int i=0; i<numVertices; i++) {
        color_buffer_data [3*i] = red;
        color_buffer_data [3*i + 1] = green;
        color_buffer_data [3*i + 2] = blue;
    }

    return create3DObject(primitive_mode, numVertices, vertex_buffer_data, color_buffer_data, fill_mode);
}

/* Render the VBOs handled by VAO */
void draw3DObject (struct VAO* vao)
{
    // Change the Fill Mode for this object
    glPolygonMode (GL_FRONT_AND_BACK, vao->FillMode);

    // Bind the VAO to use
    glBindVertexArray (vao->VertexArrayID);

    // Enable Vertex Attribute 0 - 3d Vertices
    glEnableVertexAttribArray(0);
    // Bind the VBO to use
    glBindBuffer(GL_ARRAY_BUFFER, vao->VertexBuffer);

    // Enable Vertex Attribute 1 - Color
    glEnableVertexAttribArray(1);
    // Bind the VBO to use
    glBindBuffer(GL_ARRAY_BUFFER, vao->ColorBuffer);

    // Draw the geometry !
    glDrawArrays(vao->PrimitiveMode, 0, vao->NumVertices); // Starting from vertex 0; 3 vertices total -> 1 triangle
}

/**************************
 * Customizable functions *
 **************************/
float triangle_rot_dir = 1;
float rectangle_rot_dir = 1;
bool triangle_rot_status = true;
bool rectangle_rot_status = true;
//My defination/
const double ground=-25;
double cfr;
///code////
typedef VAO* vao;
vector <vao> shapes;
vector <vao> shapes1;
typedef struct str{
  double angle,vx,vy,last_time,x,y,radius,mass;
  double gravity,drag,friction;;
  vector<glm::vec3> vertex;
  str(double angle,double x,double y,double time,double vx,double vy,double radius,double mass)
  : angle(angle), x(x), y(y), last_time(time), vx(vx), vy(vy), radius(radius), gravity(20), mass(mass), drag(5), friction(1) {}
  GLfloat vertex_buffer_data[10000],color_buffer_data[10000];
vao createPolygon(const vector<glm::vec3> &pts,GLfloat red,GLfloat blue,GLfloat green)
{
  vao poly;
	GLfloat vertex_buffer_data[3*(pts.size()+2)];
	vertex_buffer_data[0]=0;
	vertex_buffer_data[1]=0;
	vertex_buffer_data[2]=0;
	for(auto it:pts)
	 vertex.PB(it),vertex_buffer_data[0]+=it.x,vertex_buffer_data[1]+=it.y,vertex_buffer_data[2]+=it.z;
	vertex_buffer_data[0]/=pts.size();
	vertex_buffer_data[1]/=pts.size();
	vertex_buffer_data[2]/=pts.size();
	int i;
	for(i=1;i<=pts.size();i++)
	{
		vertex_buffer_data[3*i]=pts[i-1].x;
		vertex_buffer_data[3*i+1]=pts[i-1].y;
		vertex_buffer_data[3*i+2]=pts[i-1].z;
	}
  vertex.PB(pts[0]);
	vertex_buffer_data[3*i]=pts[0].x;
	vertex_buffer_data[3*i+1]=pts[0].y;
	vertex_buffer_data[3*i+2]=pts[0].z;
	return (create3DObject(GL_TRIANGLE_FAN,pts.size()+2,vertex_buffer_data,red,blue,green));
}
	DD updateposition()
  {
    double current_time = glfwGetTime(),opposition;
    if((current_time-last_time)<=(1e-5)|| mass==(1e10)) return MP(x,y);
    x+=vx*(current_time-last_time);
    if(y==ground+radius) opposition=drag+(friction*gravity),vy=0;
    y=max(ground+radius,y+(vy*(current_time-last_time)-(0.5*(gravity)*(current_time-last_time)*(current_time-last_time))));
    vx=vx-((vx/abs(vx))*(opposition*(current_time-last_time)));
    vx=vy-((vy/abs(vy))*(drag*(current_time-last_time)));
    last_time=current_time;
    return MP(x,y);
  }
  void set_vel(double v,double angle){
      vx=v*cos(angle*M_PI/180.0f);
      vy=v*sin(angle*M_PI/180.0f);
      cout<<vx<<" "<<vy<<endl;
      last_time=glfwGetTime();
  }
}structure;
vector <glm::vec3>  createCircle(DD O,double radius)
{
  vector<glm::vec3> pts;
  glm::vec3 pt;
  double trianglenumeber=100;
    for(int i=0;i<100;i++)
    {
          pt.x=O.F+(radius*cos(2*i*M_PI/trianglenumeber));
          pt.y=O.S+(radius*sin(2*i*M_PI/trianglenumeber));
          pt.z=0;
          pts.PB(pt);
    }
    return pts;
}
glm::vec3 invec(double x,double y,double z)
{
  glm::vec3 ans;
  ans.x=x;ans.y=y;ans.z=z;
  return ans;
}
double length(glm::vec3 a){
  return sqrt((a.x*a.x)+(a.y*a.y)+(a.z*a.z));
}
glm::vec3 vectorr(glm::vec3 a,glm::vec3 b){
  glm::vec3 ans;
   ans.x=a.x-b.x;ans.y=(a.y-b.y),ans.z=(a.z-b.z);
   return ans;
}
double dotproduct(glm::vec3 a,glm::vec3 b){
  return (a.x*b.x)+(a.y*b.y)+(a.z*b.z);
}
double crossproduct(glm::vec3 a,glm::vec3 b){   ///in 2d only
  return  ((a.x*b.y)-(a.y*b.x));
}
bool check_collision(structure ball,structure a)
{
    ball.updateposition();
    for(int i=0;i+1<a.vertex.size();i++)
    {
        glm::vec3 vec; vec.x=ball.x;vec.y=ball.y ;vec.z=0;
        cout<<vec.x<<" "<<vec.y<<" "<<vec.z<<endl;
        cout<<a.vertex[i].x<<" "<<a.vertex[i].y<<" "<<a.vertex[i].z<<endl;
        cout<<a.vertex[i+1].x<<" "<<a.vertex[i+1].y<<" "<<a.vertex[i+1].z<<endl;
        glm::vec3 vec1=vectorr(a.vertex[i+1],a.vertex[i]),vec2=vectorr(vec,a.vertex[i]),vec3=vectorr(vec,a.vertex[i+1]);
        //cout<<"starts"<<endl;
        if(abs(crossproduct(vec1,vec2)/(length(vec1)))>ball.radius) continue;
        //cout<<"return1"<<endl;
        cout<<vec1.x<<" "<<vec2.x<<" "<<vec1.y<<" "<<vec2.y<<" "<<vec1.z<<" "<<vec2.z<<endl;
        cout<<dotproduct(vec1,vec2)<<" "<< dotproduct(vec1,vec3)<<endl;
        if(dotproduct(vec1,vec2)<0 || dotproduct(vec1,vec3)>0) continue;
        cout<<"return2"<<endl;
        double cs=vec1.x/length(vec1);
        double sn=vec1.y/length(vec1);
        ball.vx=ball.vx*cs-(cfr*ball.vx*sn);
        ball.vy=ball.vy*sn+(cfr*ball.vy*cs);
      return 1;
    }
    return 0;
}
vector<structure> structures;
vector<structure> balls;

/* Executed when a regular key is pressed/released/held-down */
/* Prefered for Keyboard events */
double last_time;
void keyboard (GLFWwindow* window, int key, int scancode, int action, int mods)
{
     // Function is called first on GLFW_PRESS.
  //   cout<<"ball";
    structure  ball(0,structures[0].x,structures[0].y,glfwGetTime(),0.0,0.0,2.5,40.0);
    vector <glm::vec3> v=createCircle(MP(22,0),3.0);
     shapes1.PB(ball.createPolygon(v,0,0,0));
     double time=glfwGetTime();
     double speed=50;
    if (action == GLFW_RELEASE) {
        switch (key) {
            case GLFW_KEY_A:
                structures[0].angle+=5;
                break;
            case GLFW_KEY_B:
              structures[0].angle-=5;
                break;
            case GLFW_KEY_F:
                speed+=2;
                break;
            case GLFW_KEY_S:
                speed-=2;
                break;
            case GLFW_KEY_SPACE:
              if(time-last_time > 0.5){
              ball.set_vel(speed,structures[0].angle);
              ball.updateposition();
              ball.angle+=structures[0].angle;
              balls.PB(ball);
              last_time=time;
            }
              break;
            default:
                break;
        }
    }
    else if (action == GLFW_PRESS) {
        switch (key) {
            case GLFW_KEY_ESCAPE:
              //  quit(window);
                break;
            default:
                break;
        }
    }
}

/* Executed for character input (like in text boxes) */
void keyboardChar (GLFWwindow* window, unsigned int key)
{
	switch (key) {
		case 'Q':
		case 'q':
            quit(window);
            break;
		default:
			break;
	}
}

/* Executed when a mouse button is pressed/released */
void mouseButton (GLFWwindow* window, int button, int action, int mods)
{
    switch (button) {
        case GLFW_MOUSE_BUTTON_LEFT:
            if (action == GLFW_RELEASE)
                triangle_rot_dir *= -1;
            break;
        case GLFW_MOUSE_BUTTON_RIGHT:
            if (action == GLFW_RELEASE) {
                rectangle_rot_dir *= -1;
            }
            break;
        default:
            break;
    }
}


/* Executed when window is resized to 'width' and 'height' */
/* Modify the bounds of the screen here in glm::ortho or Field of View in glm::Perspective */
void reshapeWindow (GLFWwindow* window, int width, int height)
{
    int fbwidth=width, fbheight=height;
    /* With Retina display on Mac OS X, GLFW's FramebufferSize
     is different from WindowSize */
    glfwGetFramebufferSize(window, &fbwidth, &fbheight);

	GLfloat fov = 90.0f;

	// sets the viewport of openGL renderer
	glViewport (0, 0, (GLsizei) fbwidth, (GLsizei) fbheight);

	// set the projection matrix as perspective
	/* glMatrixMode (GL_PROJECTION);
	   glLoadIdentity ();
	   gluPerspective (fov, (GLfloat) fbwidth / (GLfloat) fbheight, 0.1, 500.0); */
	// Store the projection matrix in a variable for future use
    // Perspective projection for 3D views
    // Matrices.projection = glm::perspective (fov, (GLfloat) fbwidth / (GLfloat) fbheight, 0.1f, 500.0f);

    // Ortho projection for 2D views
    Matrices.projection = glm::ortho(-80.0, 80.0, -60.0, 60.0, 0.1, 500.0);
}
// Creates the triangle object used in this sample code

float camera_rotation_angle = 90;
/* Render the scene with openGL */
/* Edit this function according to your assignment */
void draw ()
{
  // clear the color and depth in the frame buffer
  glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  // use the loaded shader program
  // Don't change unless you know what you are doing
  glUseProgram (programID);

  // Eye - Location of camera. Don't change unless you are sure!!
  glm::vec3 eye ( 10*cos(camera_rotation_angle*M_PI/180.0f), 0, 10*sin(camera_rotation_angle*M_PI/180.0f) );
  // Target - Where is the camera looking at.  Don't change unless you are sure!!
  glm::vec3 target (0, 0, 0);
  // Up - Up vector defines tilt of camera.  Don't change unless you are sure!!
  glm::vec3 up (0, 0, 0);

  // Compute Camera matrix (view)
  // Matrices.view = glm::lookAt( eye, target, up ); // Rotating Camera for 3D
  //  Don't change unless you are sure!!
  Matrices.view = glm::lookAt(glm::vec3(0,0,10), glm::vec3(10,0,0), glm::vec3(0,10,0)); // Fixed camera for 2D (ortho) in XY plane

  // Compute ViewProject matrix as view/camera might not be changed for this frame (basic scenario)
  //  Don't change unless you are sure!!
  glm::mat4 VP = Matrices.projection * Matrices.view;

  // Send our transformation to the currently bound shader, in the "MVP" uniform
  // For each model you render, since the MVP will be different (at least the M part)
  //  Don't change unless you are sure!!
  glm::mat4 MVP;	// MVP = Projection * View * Model

  // Load identity to model matrix
  for(int i=0;i<structures.size();i++)
  {
    Matrices.model = glm::mat4(1.0f);
    structure A=structures[i];
    vao shape=shapes[i];
    /* Render your scene */
//    A.updateposition();
  //  cout<<i<<" "<<A.x<<" struct "<<A.y<<endl;
    glm::mat4 translate = glm::translate (glm::vec3(A.x, A.y, 0.0f)); // glTranslatef
    glm::mat4 rotate = glm::rotate((float)(A.angle*M_PI/180.0f), glm::vec3(0,0,1));  // rotate about vector (1,0,0)
    glm::mat4 Transform = translate* rotate;
    Matrices.model *= Transform;
    MVP = VP * Matrices.model; // MVP = p * V * M

    //  Don't change unless you are sure!!
    glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

    // draw3DObject draws the VAO given to it using current MVP matrix
    draw3DObject(shape);
}
for(int i=0;i<balls.size();i++)
{
  Matrices.model = glm::mat4(1.0f);
  structure A=balls[i];
  vao shape=shapes1[i];
  /* Render your scene */
  A.updateposition();
  glm::mat4 translate = glm::translate (glm::vec3(A.x, A.y, 0.0f)); // glTranslatef
  glm::mat4 rotate = glm::rotate((float)(A.angle*M_PI/180.0f), glm::vec3(0,0,1));  // rotate about vector (1,0,0)
  glm::mat4 Transform = translate* rotate;
  Matrices.model *= Transform;
  MVP = VP * Matrices.model; // MVP = p * V * M

  //  Don't change unless you are sure!!
  glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);

  // draw3DObject draws the VAO given to it using current MVP matrix
  draw3DObject(shape);
 }
}

/* Initialise glfw window, I/O callbacks and the renderer to use */
/* Nothing to Edit here */
GLFWwindow* initGLFW (int width, int height)
{
    GLFWwindow* window; // window desciptor/handle

    glfwSetErrorCallback(error_callback);
    if (!glfwInit()) {
        exit(EXIT_FAILURE);
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    window = glfwCreateWindow(width, height, "Graphics assignment", NULL, NULL);

    if (!window) {
        glfwTerminate();
        exit(EXIT_FAILURE);
    }

    glfwMakeContextCurrent(window);
    gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);
    glfwSwapInterval( 1 );

    /* --- register callbacks with GLFW --- */

    /* Register function to handle window resizes */
    /* With Retina display on Mac OS X GLFW's FramebufferSize
     is different from WindowSize */
    glfwSetFramebufferSizeCallback(window, reshapeWindow);
    glfwSetWindowSizeCallback(window, reshapeWindow);

    /* Register function to handle window close */
    glfwSetWindowCloseCallback(window, quit);

    /* Register function to handle keyboard input */
    glfwSetKeyCallback(window, keyboard);      // general keyboard input
    glfwSetCharCallback(window, keyboardChar);  // simpler specific character handling

    /* Register function to handle mouse click */
    glfwSetMouseButtonCallback(window, mouseButton);
    //glfwSetCursorPosCallback (window, mousehover)

  // mouse button clicks

    return window;
}

/* Initialize the OpenGL rendering properties */
/* Add all the models to be created here */
void initGL (GLFWwindow* window, int width, int height)
{
    /* Objects should be created before any other gl function and shaders */
	// Create the models
	// Generate the VAO, VBOs, vertices data & copy into the array buffer
  //cerr<<"here"<<endl;
  structure canon(0,-60,ground+6,glfwGetTime(),0,0,6,std::numeric_limits<double>::infinity());
  //cout<<"here"<<endl;
	vector <glm::vec3> v=createCircle(MP(0,0),6);
  //cout<<"here"<<endl;
  v.PB(invec(0,6,0));v.PB(invec(0,-6,0));v.PB(invec(20,-3,0));v.PB(invec(20,3,0));v.PB(invec(0,6,0));
  shapes.PB(canon.createPolygon(v,0.5,0.4,0.3));
  structures.PB(canon);
  structure rock(0,0,0,glfwGetTime(),0,0,6,(1e10));
  //cout<<"here"<<endl;
  v.clear();
  //cout<<"here"<<endl;
  v.PB(invec(-6,6,0));v.PB(invec(-6,-6,0));v.PB(invec(6,-6,0));v.PB(invec(6,6,0));
  shapes.PB(rock.createPolygon(v,1,1,1));
  structures.PB(rock);
  //cout<<"here"<<endl;

	// Create and compile our GLSL program from the shaders
	programID = LoadShaders( "Sample_GL.vert", "Sample_GL.frag" );
	// Get a handle for our "MVP" uniform
	Matrices.MatrixID = glGetUniformLocation(programID, "MVP");


	reshapeWindow (window, width, height);

    // Background color of the scene
	glClearColor (0.0f, 0.9f, 0.8f, 0.0f); // R, G, B, A
	glClearDepth (1.0f);

	glEnable (GL_DEPTH_TEST);
	glDepthFunc (GL_LEQUAL);

    cout << "VENDOR: " << glGetString(GL_VENDOR) << endl;
    cout << "RENDERER: " << glGetString(GL_RENDERER) << endl;
    cout << "VERSION: " << glGetString(GL_VERSION) << endl;
    cout << "GLSL: " << glGetString(GL_SHADING_LANGUAGE_VERSION) << endl;
}
int main (int argc, char** argv)
{
  cout<<"her"<<endl;
  cout<<flush;
	int width = 1600;
	int height = 1000;
  cout<<"her"<<endl;
  cout.flush();
  GLFWwindow* window = initGLFW(width, height);
  cout<<"her"<<endl;
  cout.flush();
	initGL (window, width, height);

    double last_update_time = glfwGetTime(), current_time;

  //  Draw in loop
    while (!glfwWindowShouldClose(window)) {

        // OpenGL Draw commands
        for(int i=0;i<balls.size();i++)
          for(int j=1;j<structures.size();j++)
            {
                check_collision(balls[i],structures[j]);
            }
        draw();

        // Swap Frame Buffer in double buffering
        glfwSwapBuffers(window);

        // Poll for Keyboard and mouse events
        glfwPollEvents();

        // Control based on time (Time based transformation like 5 degrees rotation every 0.5s)
        current_time = glfwGetTime(); // Time in seconds
        if ((current_time - last_update_time) >= 0.5) { // atleast 0.5s elapsed since last frame
            // do something every 0.5 seconds ..
            last_update_time = current_time;
        }
    }

    glfwTerminate();
    exit(EXIT_SUCCESS);

}
